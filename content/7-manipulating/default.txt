Title: Manipulating

----

Text:

# Attributes

## attr() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__ `(only for numbers, arrays, colors, ...)`

Set a single attribute:
```javascript
rect.attr('x', 50)
```

Set multiple attributes at once:
```javascript
rect.attr({
  fill: '#f06'
, 'fill-opacity': 0.5
, stroke: '#000'
, 'stroke-width': 10
})
```

Set an attribute with a namespace:
```javascript
rect.attr('x', 50, 'http://www.w3.org/2000/svg')
```

Explicitly remove an attribute:
```javascript
rect.attr('fill', null)
```

## attr() _as getter_

`returns` __`value`__ `(string, number, ...)`

You can get and set an element's attributes directly using `attr()`.

Get a single attribute:
```javascript
var x = rect.attr('x')
```

Get all attributes as an object:

```javascript
var attributes = rect.attr()
```

<br>
# Positioning

While positioning an element by directly setting its attributes works only if the attributes are used natively by that type of element, the positioning methods described below are much more convenient as they work for all element types.

For example, the following code works because each element is positioned by setting native attributes:

```javascript
rect.attr({ x: 20, y: 60 })
circle.attr({ cx: 50, cy: 40 })
```

The `rect` will be moved by its upper left corner to the new coordinates, and the `circle` will be moved by its centre. However, trying to move a `circle` by its 'corner' or a `rect` by its centre in this way will fail. The following lines will get silently ignored as the attributes that are addressed are not natively used by the element setting them:

```javascript
rect.attr({ cx: 20, cy: 60 })
circle.attr({ x: 50, y: 40 })
```

However, the positioning methods detailed below will work for all element types, regardless of whether the attributes being addressed are native to the type. So, unlike the lines above, these lines work just fine:

```javascript
rect.cx(20).cy(60)
circle.x(50).y(40)
```

It is important to note, though, that these methods are only intended for use with user (unitless) coordinates. If for example, an element has its size set via percentages or other units, the positioning methods that address its native attributes will most likely still work, but the ones that address non-native attributes will give unexpected results -- as both getters and setters!

## move()

`returns` __`itself`__<br>`animate` __`yes`__

Move the element by its upper left corner to a given `x` and `y` position:

```javascript
rect.move(200, 350)
```

## x() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__

Move the element by its upper left corner along the x-axis only:

```javascript
rect.x(200)
```

## x() _as getter_

`returns` __`value`__

Without an argument the `x()` method serves as a getter:

```javascript
var x = rect.x()
```

## y() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__

Move the element by its upper left corner along the y-axis only:

```javascript
rect.y(350)
```

## y() _as getter_

`returns` __`value`__

Without an argument the `y()` method serves as a getter:

```javascript
var y = rect.y()
```

## center()

`returns` __`itself`__<br>`animate` __`yes`__

Move the element by its center to a given `cx` and `cy` position:

```javascript
rect.center(150, 150)
```

## cx() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__

Move the element by its centre in the `x` direction only:

```javascript
rect.cx(200)
```

## cx() _as getter_

`returns` __`value`__

Without an argument the `cx()` method serves as a getter:

```javascript
var cx = rect.cx()
```

## cy() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__

Move the element by its centre in the `y` direction only:

```javascript
rect.cy(350)
```

## cy() _as getter_

`returns` __`value`__

Without an argument the `cy()` method serves as a getter as well:

```javascript
var cy = rect.cy()
```

## dmove()

`returns` __`itself`__<br>`animate` __`yes`__

Shift the element in both the `x` and `y` directions relative to its current position:

```javascript
rect.dmove(10, 30)
```

**Note**: when using `dmove()` (and `dx()` or `dy()` too for that matter), always make sure you provide values of the same unit the element is originally positioned in. So if the element is at `x:10%`, use `element.dx('5%')` and not `element.dx('5px')`.

## dx()

`returns` __`itself`__<br>`animate` __`yes`__

Shift the element in the `x` direction relative to its current position:

```javascript
rect.dx(200)
```

## dy()

`returns` __`itself`__<br>`animate` __`yes`__

Shift the element in the `y` direction relative to its current position:

```javascript
rect.dy(200)
```

<br>
# Resizing

## size()

`returns` __`itself`__<br>`animate` __`yes`__

Set the size of an element to a given `width` and `height`:

```javascript
rect.size(200, 300)
```

Proportional resizing is also possible by leaving out `height`:

```javascript
rect.size(200)
```

Or by passing `null` as the value for `width`:

```javascript
rect.size(null, 200)
```

As with positioning, the size of an element could be set by using `attr()`. But because every type of element is handles its size differently the `size()` method is much more convenient.

There is one exception though: for `SVG.Text` elements, this method takes only one argument and applies the given value to the `font-size` attribute.

## width() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__

Set the width of an element:

```javascript
rect.width(200)
```

## width() _as getter_

`returns` __`value`__

```javascript
var width = rect.width()
```

## height() _as setter_

`returns` __`itself`__<br>`animate` __`yes`__

Set the height of an element:

```javascript
rect.height(325)
```

## height() _as getter_

`returns` __`value`__

```javascript
rect.height()
```

## radius()

`returns` __`itself`__<br>`animate` __`yes`__

Circles, ellipses, and rects may use the `radius()` method. On rects, it defines rounded corners.

For a circle, the argument sets the `r` attribute.

```javascript
circle.radius(10)
```

For ellipses and rects, pass two arguments to set the `rx` and `ry` attributes individually. Or, pass a single argument, to make the two attributes equal.

```javascript
ellipse.radius(10, 20)
rect.radius(5)
```

<br>
# Syntactic sugar

## fill()

`returns` __`itself`__

The `fill()` method is a pretty alternative to the `attr()` method:

```javascript
rect.fill({ color: '#f06', opacity: 0.6 })
```

A single hex string will work as well:

```javascript
rect.fill('#f06')
```

Last but not least, you can also use an image as fill, simply by passing an image url:

```javascript
rect.fill('images/shade.jpg')
```

Or if you want more control over the size of the image, you can pass an image instance as well:

```javascript
rect.fill(draw.image('images/shade.jpg', 20, 20))
```

## stroke()

`returns` __`itself`__

The `stroke()` method is similar to `fill()`:

```javascript
rect.stroke({ color: '#f06', opacity: 0.6, width: 5 })
```

Like fill, a single hex string will work as well:

```javascript
rect.stroke('#f06')
```

Not unlike the `fill()` method, you can also use an image as stroke, simply by passing an image url:

```javascript
rect.stroke('images/shade.jpg')
```

Or if you want more control over the size of the image, you can pass an image instance as well:

```javascript
rect.stroke(draw.image('images/shade.jpg', 20, 20))
```

## opacity()

`returns` __`itself`__

To set the overall opacity of an element:

```javascript
rect.opacity(0.5)
```

<br>
# Transforming

## transform() _as setter_

`returns`__ `itself`__<br>`animate`__ `yes`__

As a setter it has two ways of working. By default transformations are absolute. For example, if you call:

```javascript
element.transform({ rotation: 125 }).transform({ rotation: 37.5 })
```

The resulting rotation will be `37.5` and not the sum of the two transformations. But if that's what you want there is a way out by adding the `relative` parameter. That would be:


```javascript
element.transform({ rotation: 125 }).transform({ rotation: 37.5, relative: true })
```

Alternatively a relative flag can be passed as the second argument:

```javascript
element.transform({ rotation: 125 }).transform({ rotation: 37.5 }, true)
```

Available transformations are:

- `rotation` with optional `cx` and `cy`
- `scale` with optional `cx` and `cy`
- `scaleX` with optional `cx` and `cy`
- `scaleY` with optional `cx` and `cy`
- `skewX` with optional `cx` and `cy`
- `skewY` with optional `cx` and `cy`
- `x`
- `y`
- `a`, `b`, `c`, `d`, `e` and/or `f` or an existing matrix instead of the object

## transform() _as getter_

`returns`__ `value`__

The `transform()` method acts as a full getter without an argument:

```javascript
element.transform()
```

The returned __`object`__ contains the following values:

- `x` (translation on the x-axis)
- `y` (translation on the y-axis)
- `skewX` (calculated skew on x-axis)
- `skewY` (calculated skew on y-axis)
- `scaleX` (calculated scale on x-axis)
- `scaleY` (calculated scale on y-axis)
- `rotation` (calculated rotation)
- `cx` (last used rotation centre on x-axis)
- `cy` (last used rotation centre on y-axis)

Additionally a string value for the required property can be passed:

```javascript
element.transform('rotation')
```

## flip()

`returns`__ `itself`__<br>`animate`__ `yes`__

Flips element over a given axis:

```javascript
element.flip('x')
```

or

```javascript
element.flip('y')
```

By default, elements are flipped over their centre point. The flip axis position can be defined with the second argument:

```javascript
element.flip('x', 150)
```

or

```javascript
element.flip('y', 100)
```

Finally, an element can also be flipped over two axes at once by not providing an axis value:

```javascript
element.flip()
```

And flipping on both axes at the same offset can be done by passing only a numeric value:

```javascript
element.flip(5)
```

## rotate()

`returns`__ `itself`__<br>`animate`__ `yes`__

The `rotate()` method will automatically rotate elements according to the center of the element:

```javascript
// rotate(degrees)
element.rotate(45)
```

Although you can also define a specific rotation point:

```javascript
// rotate(degrees, cx, cy)
element.rotate(45, 50, 50)
```

## skew()

`returns` __`itself`__<br>`animate`__ `yes`__

The `skew()` method will take an `x` and `y` value:

```javascript
// skew(x, y)
element.skew(0, 45)
```

## scale()

`returns` __`itself`__<br>`animate`__ `yes`__

The `scale()` method will scale elements by multiplying their `x` and `y`
coordinates by either a single scale factor or two separate scale factors:

```javascript
// scale(factor)
element.scale(2)
// scale(xFactor, yFactor)
element.scale(0.5, -1)
```

By default, scaling is relative to the center of the element.
You can also define a specific center point (vanishing point of scaling):

```javascript
// scale(factor, centerX, centerY)
element.scale(2, 0, 0)
// scale(xFactor, yFactor, centerX, centerY)
element.scale(0.5, -1, 0, 0)
```

## translate()

`returns` __`itself`__<br>`animate`__ `yes`__

The `translate()` method will take an `x` and `y` value:

```javascript
// translate(x, y)
element.translate(0.5, -1)
```

<br>
# Styles

## style() _as setter_

`returns` __`itself`__

With the `style()` method the `style` attribute can be managed like attributes with `attr`:

```javascript
element.style('cursor', 'pointer')
```

Multiple styles can be set at once using an object:

```javascript
element.style({ cursor: 'pointer', fill: '#f03' })
```

Or a css string:

```javascript
element.style('cursor:pointer;fill:#f03;')
```

Explicitly deleting individual style definitions works the same as with the `attr()` method:

```javascript
element.style('cursor', null)
```

## style() _as getter_

`returns` __`value`__ _(string, number, ...)_

Similar to `attr()` the `style()` method can also act as a getter:

```javascript
element.style('cursor')
// => pointer
```

Or even a full getter:

```javascript
element.style()
// => 'cursor:pointer;fill:#f03;'
```

## hide()

`returns` __`itself`__

Hide element:

```javascript
element.hide()
```

## show()

`returns` __`itself`__

Show (unhide) element:

```javascript
element.show()
```

## visible()

`returns` __`boolean`__

To check if the element is visible:

```javascript
element.visible()
```

<br>
# Class Names

## addClass()

`returns` __`itself`__

Adds a given css class:

```javascript
element.addClass('pink-flower')
```

## classes()

`returns` __`array`__

Fetches the CSS classes for the node as an array:

```javascript
element.classes()
```

## hasClass()

`returns` __`boolean`__

Test the presence of a given css class:

```javascript
element.hasClass('purple-rain')
```

## removeClass()

`returns` __`itself`__

Removes a given css class:

```javascript
element.removeClass('pink-flower')
```

## toggleClass()

`returns` __`itself`__

Toggles a given css class:

```javascript
element.toggleClass('pink-flower')
```

<br>
# Data

The `data()` method allows you to bind arbitrary objects, strings and numbers to SVG elements.

## data() _as getter_

`returns` __`value`__

Fetching the values is similar to the `attr()` method:

```javascript
var key = rect.data('key')
```

## data() _as setter_

`returns` __`itself`__

```javascript
rect.data('key', { value: { data: 0.3 }})
```

Or set multiple values at once:

```javascript
rect.data({
  forbidden: 'fruit'
, multiple: {
    values: 'in'
  , an: 'object'
  }
})
```

Removing the data altogether:

```javascript
rect.data('key', null)
```

Your values will always be stored as JSON and in some cases this might not be desirable. If you want to store the value as-is, just pass true as the third argument:

```javascript
rect.data('key', 'value', true)
```

<br>
# Memory

## remember() _as getter_

`returns` __`value`__

To retrieve a memory

```javascript
rect.remember('oldBBox')
```

## remember() _as setter_

`returns` __`itself`__

Storing data in-memory is very much like setting attributes:

```javascript
rect.remember('oldBBox', rect.bbox())
```

Multiple values can also be remembered at once:

```javascript
rect.remember({
  oldFill:    rect.attr('fill')
, oldStroke:  rect.attr('stroke')
})
```

## forget()

`returns` __`itself`__

Erasing a single memory:

```javascript
rect.forget('oldBBox')
```

Or erasing multiple memories at once:


```javascript
rect.forget('oldFill', 'oldStroke')
```

And finally, just erasing the whole memory:

```javascript
rect.forget()
```

<br>
# Document Tree

## add()

`returns` __`itself`__

Sets the calling element as the parent node of the argument. Returns the parent:

```javascript
var rect = draw.rect(100, 100)
var group = draw.group()

group.add(rect) //-> returns group
```

## addTo()

`returns` __`itself`__

Sets the calling element as a child node of the argument. Returns the child:

```javascript
rect.addTo(group) //-> returns rect
```

## clone()

`returns` __`SVG.Element`__

To make an exact copy of an element the `clone()` method comes in handy:

```javascript
var clone = rect.clone()
```

This will create a new, unlinked copy. For making a linked clone, see the [use](/elements/use) element.
By default, the cloned element is placed directly after the original element.
When you pass a parent parameter to the `clone()` function it will append the cloned element to the given parent.

## put()

`returns` __`SVG.Element`__

Sets the calling element as the parent node of the argument. Returns the child:

```javascript
group.put(rect) //-> returns rect
```

## putIn()

`returns` __`SVG.Element`__

Sets the calling element as a child node of the argument. Returns the parent:

```javascript
rect.putIn(group) //-> returns group
```

## remove()

`returns` __`itself`__

Removes the calling element from the svg document:

```javascript
rect.remove()
```

## replace()

`returns` __`SVG.Element`__

At the calling element's position in the svg document, replace the calling element with the element passed to the method.

```javascript
rect.replace(draw.circle(100))
```

## toDoc()

`returns` __`itself`__

Same as `toParent()` but with the root-node as parent

## toParent()

`returns` __`itself`__

Moves an element to a different parent (similar to `addTo`), but without changing its visual representation. All transformations are merged and applied to the element.

```javascript
rect.toParent(group) // looks the same as before
```

## ungroup() / flatten()

`returns` __`itself`__

Break up a group/container and move all the elements to a given parent node without changing their visual representations. The result is a flat svg structure, e.g. for exporting.

Ungroup all elements in this group recursively and places them into the given parent

```javascript
group.ungroup(parent, depth)
// (default: parent container of the calling element)
```

Call it on the whole document to get a flat svg structure:

```javascript
drawing.ungroup()
```

Break up the group and places all elements in the drawing:

```javascript
group.ungroup(drawing)
```

Break up all groups until it reaches a depth of 3:

```javascript
drawing.ungroup(null, 3)
```

Flat and export svg:

```javascript
var svgString = drawing.ungroup().svg()
```

<br>
# Arranging
You can arrange elements within their parent SVG document using the following methods.

## after()

`returns` __`itself`__

Insert an element after another:

```javascript
// inserts circle after rect
rect.after(circle)
```

## before()

`returns` __`itself`__

Insert an element before another:

```javascript
// inserts circle before rect
rect.before(circle)
```

## back()

`returns` __`itself`__

Move element to the back:

```javascript
rect.back()
```

## backward()

`returns` __`itself`__

Move element one step backward:

```javascript
rect.backward()
```

## front()

`returns` __`itself`__

Move element to the front:

```javascript
rect.front()
```

## forward()

`returns` __`itself`__

Move element one step forward:

```javascript
rect.forward()
```

## next()

`returns` __`SVG.Element`__

Get the next sibling:

```javascript
rect.next()
```

## position()

`returns` __`number`__

Get the position (a number) of rect between its siblings:

```javascript
rect.position()
```

## previous()

`returns` __`SVG.Element`__

Get the previous sibling:

```javascript
rect.previous()
```

## siblings()

`returns` __`array`__

The arrange.js module brings some additional methods. To get all siblings of rect, including rect itself:

```javascript
rect.siblings()
```

<br>
# Geometry

## point()

`returns` __[`SVG.Point`](/classes/#svg-point)__

Transforms a point from screen coordinates to the elements coordinate system.

```javascript
// e is some mouseevent
var point = path.point(e.screenX, e.screenY) // {x, y}
```

## inside()

`returns` __`boolean`__

To check if a given point is inside the bounding box of an element you can use the `inside()` method:

```javascript
var rect = draw.rect(100, 100).move(50, 50)

rect.inside(25, 30) //-> returns false
rect.inside(60, 70) //-> returns true
```

**Note**: the `x` and `y` positions are tested against the relative position of the element. Any offset on the parent element is not taken into account.

----

Description: Everything you need to know about manipulating elements using their attributes, transforms, styles, classes and more.
